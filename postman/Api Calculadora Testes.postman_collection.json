{
	"info": {
		"_postman_id": "5d63a5a2-19b8-4b32-8844-7a168b348ce5",
		"name": "Api Calculadora Testes",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9798213",
		"_collection_link": "https://dark-desert-264124.postman.co/workspace/Treinamentos-Apis-Spring-Boot~b13b3af7-7054-4fe3-9aae-76fe13ab41d6/collection/9798213-5d63a5a2-19b8-4b32-8844-7a168b348ce5?action=share&source=collection_link&creator=9798213"
	},
	"item": [
		{
			"name": "Config",
			"item": [
				{
					"name": "Configs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function criarFuncoes(){",
									"",
									"    let utils = {};",
									"",
									"    utils.isTokenExpirado = function isTokenExpirado(){",
									"        let timeAtual = new Date().getTime();",
									"        let timeExpire = pm.environment.get('TIME_EXPIRE_TOKEN');",
									"        return timeAtual >= timeExpire;",
									"    }",
									"",
									"    utils.getUrlValidaToken = function getUrlValidaToken(){",
									"    ",
									"        let url = `${pm.environment.get('HOST')}:${pm.environment.get('PORTA')}`;",
									"        url = `${url}/${pm.environment.get('HOME')}/${pm.environment.get('API_VERSION')}`;",
									"        url = `${url}/sobre`;",
									"",
									"        return url;",
									"",
									"    }",
									"    ",
									"    utils.getUrlAutenticar = function getUrlAutenticar(){",
									"    ",
									"        let url = `${pm.environment.get('HOST')}:${pm.environment.get('PORTA')}`;",
									"        url = `${url}/usuarios/${pm.environment.get('API_VERSION')}`;",
									"        url = `${url}/autenticar`;",
									"",
									"        return url;",
									"",
									"    }",
									"",
									"    utils.validarToken = function validarToken(token){",
									"        ",
									"        let tipoTeste = pm.collectionVariables.get('TIPO_TESTE');",
									"",
									"        //não pode validar o token caso teste atual seja de token inválido",
									"        if( tipoTeste == 'tokenInvalido' ){",
									"            return;",
									"        }",
									"",
									"        //só gera novo token se o token atual expirou",
									"        if( !utils.isTokenExpirado() ){",
									"            return;",
									"        }",
									"",
									"        let getRequest = {",
									"            url:utils.getUrlValidaToken(),",
									"            method:'GET',",
									"            header:{",
									"                'Authorization':'Bearer ' + token",
									"            }",
									"        }",
									"",
									"        try{",
									"            pm.sendRequest(getRequest, (error, response)=>{",
									"                if(error){",
									"                }",
									"                if(response.code != 200){",
									"                    utils.gerarToken();        ",
									"                }",
									"            });",
									"        }catch(err){",
									"            pm.test('Erro ao Validar Token '+err.message,()=>{",
									"                pm.expect().fail();",
									"            });",
									"        }",
									"        ",
									"    }",
									"    ",
									"    utils.gerarToken = function gerarToken(){",
									"        ",
									"        const postRequest = {",
									"            url:utils.getUrlAutenticar(),",
									"            method:'POST',",
									"            header:{",
									"                'Accept':'application/json',",
									"                'Content-Type':'application/json'",
									"            },",
									"            body:JSON.stringify({",
									"                login:pm.environment.get('USER'),",
									"                password:pm.environment.get('PASSWORD')",
									"            })",
									"        };",
									"",
									"        try{",
									"            pm.sendRequest(postRequest, (error, response) => {",
									"                ",
									"                if(error){",
									"                    return;",
									"                }",
									"                ",
									"                let token = response.json().token;",
									"                pm.environment.set('TOKEN', token);",
									"",
									"                let timeExpireToken = new Date().getTime() + (3450*1000);",
									"                pm.environment.set('TIME_EXPIRE_TOKEN', timeExpireToken);",
									"",
									"            });",
									"        }catch(err){",
									"            pm.test('Erro ao Gerar Token '+err.message,()=>{",
									"                pm.expect().fail();",
									"            });",
									"        }",
									"",
									"    }",
									"",
									"    return utils;",
									"",
									"}",
									"",
									"let fnUtils = criarFuncoes + '; criarFuncoes();';",
									"",
									"pm.collectionVariables.set('API_UTILS', fnUtils);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let configs = pm.collectionVariables.get('API_UTILS');",
									"",
									"pm.test('Configs criadas com sucesso',()=>{",
									"    pm.expect(configs).to.be.not.undefined;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}:{{PORTA}}/{{HOME}}/{{API_VERSION}}/",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORTA}}",
							"path": [
								"{{HOME}}",
								"{{API_VERSION}}",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Fluxo Principal",
			"item": [
				{
					"name": "Inicio Fluxo Principal",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let prev = pm.collectionVariables.get('PREV_REQ_TEST');",
									"let next = pm.collectionVariables.get('NEXT_REQ_TEST');",
									"",
									"let tipoTeste = undefined;",
									"let fluxoPrincipalIniciado = pm.collectionVariables.get('FLUXO_PRINCIPAL_INICIADO');",
									"",
									"if(fluxoPrincipalIniciado == 1){",
									"",
									"    if( prev == 'Teste crossOrigin' ){",
									"        tipoTeste = 'crossOrigin';",
									"    }else if( prev == 'Teste Token Invalido' ){",
									"        tipoTeste = 'tokenInvalido';",
									"    }",
									"        ",
									"    pm.collectionVariables.set('TIPO_TESTE', tipoTeste);",
									"",
									"    pm.test('Cenário de ' + tipoTeste + ' definido para ser testado',()=>{",
									"        pm.expect(tipoTeste).to.be.not.undefined;",
									"    });",
									"}else{",
									"    pm.collectionVariables.set('FLUXO_PRINCIPAL_INICIADO',1);",
									"    pm.test('Inicindo Fluxo de Testes Principal');",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}:{{PORTA}}/{{HOME}}/{{API_VERSION}}/",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORTA}}",
							"path": [
								"{{HOME}}",
								"{{API_VERSION}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Criar Calculo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let code = pm.response.code;",
									"",
									"let tipoTeste = pm.collectionVariables.get('TIPO_TESTE');",
									"",
									"let fnLocais = {",
									"    principal : function(){",
									"",
									"        let jsonResponse = pm.response.json();",
									"",
									"        pm.collectionVariables.set('CALC_ID', undefined);",
									"",
									"        let chaveId = Object.keys(jsonResponse).includes('id'); ",
									"",
									"        pm.test('Chave id retornada', ()=>{",
									"            pm.expect(chaveId).to.be.true;",
									"        });",
									"",
									"        if(!chaveId){",
									"            return;",
									"        }",
									"",
									"        let calcId = jsonResponse.id;",
									"        let calcIdRetornado = jsonResponse.id !== undefined && jsonResponse.id !== null;",
									"",
									"        pm.test('Valor ID ' + calcId + ' Válido retornado', ()=>{",
									"            pm.expect(calcIdRetornado).to.be.true;",
									"        });",
									"",
									"        if(!calcId){",
									"            return;",
									"        }",
									"",
									"        pm.collectionVariables.set('CALC_ID', calcId);",
									"        pm.collectionVariables.set('CONTADOR', 0);",
									"    }",
									"}",
									"",
									"if(Object.keys(fnLocais).includes(tipoTeste)){",
									"    fnLocais[tipoTeste]();",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let tipoTeste = pm.collectionVariables.get('TIPO_TESTE');",
									"",
									"let fnLocais = {}",
									"",
									"if( Object.keys(fnLocais).includes(tipoTeste) ){",
									"    fnLocais[tipoTeste]();",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"descricao\": \"Aguardando processamento\",\n    \"valor1\": \"{{$randomInt}}\",\n    \"valor2\": \"{{$randomInt}}\",\n    \"sinal\": \"+\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}:{{PORTA}}/{{RECURSO}}/{{API_VERSION}}/criar",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORTA}}",
							"path": [
								"{{RECURSO}}",
								"{{API_VERSION}}",
								"criar"
							]
						}
					},
					"response": []
				},
				{
					"name": "Listar Calculos Json",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let code = pm.response.code;",
									"",
									"let tipoTeste = pm.collectionVariables.get('TIPO_TESTE');",
									"",
									"let fnLocais = {",
									"    principal : function(){",
									"",
									"        let jsonResponse = pm.response.json();",
									"",
									"        let arrayRetornado = Array.isArray(jsonResponse);",
									"",
									"        pm.test('Array de calculos retornado', ()=>{",
									"            pm.expect(arrayRetornado).to.be.true;",
									"        });",
									"",
									"        if( !arrayRetornado ){",
									"            return;",
									"        }",
									"",
									"        let qtdeCalculos = jsonResponse.length;",
									"",
									"        pm.test('Array com registros retornados', ()=>{",
									"            pm.expect(qtdeCalculos).to.be.above(0);",
									"        });",
									"",
									"        if(qtdeCalculos == 0){",
									"            return;",
									"        }",
									"",
									"        let filtroIdDesejado = jsonResponse",
									"            .filter((calc)=>{",
									"                return calc.id == pm.collectionVariables.get('CALC_ID');",
									"            });",
									"        ",
									"        let idDesejadoEncontrado = Array.isArray(filtroIdDesejado) && filtroIdDesejado.length > 0;",
									"",
									"        pm.test('ID ' + pm.collectionVariables.get('CALC_ID') + ' encontrado', ()=>{",
									"            pm.expect(idDesejadoEncontrado).to.be.true;",
									"        });",
									"",
									"        if( !idDesejadoEncontrado ){",
									"            return;",
									"        }",
									"    }",
									"}",
									"",
									"if(Object.keys(fnLocais).includes(tipoTeste)){",
									"    fnLocais[tipoTeste]();",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let tipoTeste = pm.collectionVariables.get('TIPO_TESTE');",
									"",
									"let fnLocais = {}",
									"",
									"if( Object.keys(fnLocais).includes(tipoTeste) ){",
									"    fnLocais[tipoTeste]();",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}:{{PORTA}}/{{RECURSO}}/{{API_VERSION}}/listar",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORTA}}",
							"path": [
								"{{RECURSO}}",
								"{{API_VERSION}}",
								"listar"
							]
						}
					},
					"response": []
				},
				{
					"name": "Listar Calculos Xml",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let code = pm.response.code;",
									"",
									"let tipoTeste = pm.collectionVariables.get('TIPO_TESTE');",
									"",
									"let fnLocais = {",
									"    principal : function(){",
									"        try{",
									"            let jsonResponse = pm.response.json();",
									"            pm.test('Não era esperado um json válido!!',()=>{",
									"                pm.expect().fail();",
									"            });",
									"        }catch(err){",
									"            let msgEsperada = 'Unexpected token';",
									"            let msgErroXml = err.message.startsWith(msgEsperada);",
									"            ",
									"            pm.test('Validando Mensagem Esperada = ' + err.message, ()=>{",
									"                pm.expect(msgErroXml).to.be.true;",
									"            });",
									"        }",
									"    }",
									"}",
									"",
									"if(Object.keys(fnLocais).includes(tipoTeste)){",
									"    fnLocais[tipoTeste]();",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let tipoTeste = pm.collectionVariables.get('TIPO_TESTE');",
									"",
									"let fnLocais = {}",
									"",
									"if( Object.keys(fnLocais).includes(tipoTeste) ){",
									"    fnLocais[tipoTeste]();",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}:{{PORTA}}/{{RECURSO}}/{{API_VERSION}}/listar",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORTA}}",
							"path": [
								"{{RECURSO}}",
								"{{API_VERSION}}",
								"listar"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Status Salvar",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let tipoTeste = pm.collectionVariables.get('TIPO_TESTE');",
									"",
									"let fnLocais = {",
									"    principal : function(){",
									"        setTimeout(()=>{}, 2000);",
									"    }",
									"}",
									"",
									"if( Object.keys(fnLocais).includes(tipoTeste) ){",
									"    fnLocais[tipoTeste]();",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let apiVersion = pm.environment.get('API_VERSION');",
									"",
									"let code = pm.response.code;",
									"",
									"let tipoTeste = pm.collectionVariables.get('TIPO_TESTE');",
									"",
									"let fnLocais = {",
									"    principal : function(){",
									"        try{",
									"        ",
									"            let jsonResponse = pm.response.json();",
									"",
									"            if(apiVersion == 'v1'){",
									"                pm.test('Checagem de status não disponível nessa versão da api.');",
									"                return;",
									"            }",
									"",
									"            let contador = pm.collectionVariables.get('CONTADOR');",
									"",
									"            if( contador >= 15 ){      ",
									"                throw new Error('Limite de tentativas atingido');",
									"            }",
									"",
									"            if( !Object.keys(jsonResponse).includes('estado') ){",
									"                throw new Error('Estado não retornado');",
									"            }",
									"",
									"            if( jsonResponse.estado == 'F' ){",
									"                pm.test('Calculo processado com sucesso');",
									"                setTimeout(()=>{},5000);",
									"                return;",
									"            }",
									"",
									"            pm.test('Tentativa de consulta finalizada, Cálculo ainda em processamento');",
									"",
									"            pm.collectionVariables.set('CONTADOR', ++contador);",
									"            postman.setNextRequest('Check Status Salvar');",
									"        }catch(err){",
									"            pm.test(err.message, ()=>{",
									"                pm.expect().fail();",
									"            });",
									"        }",
									"    }",
									"}",
									"",
									"if(Object.keys(fnLocais).includes(tipoTeste)){",
									"    fnLocais[tipoTeste]();",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}:{{PORTA}}/{{RECURSO}}/{{API_VERSION}}/status/{{CALC_ID}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORTA}}",
							"path": [
								"{{RECURSO}}",
								"{{API_VERSION}}",
								"status",
								"{{CALC_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Detalhar Pos Salvar",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let tipoTeste = pm.collectionVariables.get('TIPO_TESTE');",
									"",
									"let fnLocais = {}",
									"",
									"if( Object.keys(fnLocais).includes(tipoTeste) ){",
									"    fnLocais[tipoTeste]();",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let apiVersion = pm.environment.get('API_VERSION');",
									"",
									"let code = pm.response.code;",
									"",
									"let tipoTeste = pm.collectionVariables.get('TIPO_TESTE');",
									"",
									"let fnLocais = {",
									"    principal : function(){",
									"        try{",
									"        ",
									"            let jsonResponse = pm.response.json();",
									"",
									"            if(apiVersion == 'v1'){",
									"                pm.test('Detalhar Calculo não disponível nessa versão da api.');",
									"                return;",
									"            }",
									"",
									"            if( !Object.keys(jsonResponse).includes('estado') ){",
									"                throw new Error('Estado não retornado');",
									"            }",
									"",
									"            if( !Object.keys(jsonResponse).includes('descricao') ",
									"                && apiVersion == 'v2' ){",
									"                throw new Error('Descrição não retornada');",
									"            }",
									"",
									"            if( jsonResponse.estado == 'F' ){",
									"                pm.test('Calculo ' + jsonResponse.descricao + ' processado com sucesso');",
									"                return;",
									"            }",
									"",
									"        }catch(err){",
									"            pm.test(err.message, ()=>{",
									"                pm.expect().fail();",
									"            });",
									"        }",
									"    }",
									"}",
									"",
									"if(Object.keys(fnLocais).includes(tipoTeste)){",
									"    fnLocais[tipoTeste]();",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}:{{PORTA}}/{{RECURSO}}/{{API_VERSION}}/detalhar/{{CALC_ID}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORTA}}",
							"path": [
								"{{RECURSO}}",
								"{{API_VERSION}}",
								"detalhar",
								"{{CALC_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Atualizar Calculo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let code = pm.response.code;",
									"",
									"let tipoTeste = pm.collectionVariables.get('TIPO_TESTE');",
									"",
									"let fnLocais = {",
									"    principal : function(){",
									"",
									"        pm.collectionVariables.set('CONTADOR', 0);",
									"        ",
									"        let jsonResponse = pm.response.json();",
									"",
									"        let chaveId = Object.keys(jsonResponse).includes('id'); ",
									"",
									"        pm.test('Chave id retornada', ()=>{",
									"            pm.expect(chaveId).to.be.true;",
									"        });",
									"",
									"        if(!chaveId){",
									"            return;",
									"        }",
									"",
									"        let calcIdRetornado = jsonResponse.id !== undefined && jsonResponse.id !== null;",
									"",
									"        pm.test('Valor ID ' + jsonResponse.id + ' Válido retornado', ()=>{",
									"            pm.expect(calcIdRetornado).to.be.true;",
									"        });",
									"        ",
									"    }",
									"}",
									"",
									"if(Object.keys(fnLocais).includes(tipoTeste)){",
									"    fnLocais[tipoTeste]();",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let tipoTeste = pm.collectionVariables.get('TIPO_TESTE');",
									"",
									"let fnLocais = {}",
									"",
									"if( Object.keys(fnLocais).includes(tipoTeste) ){",
									"    fnLocais[tipoTeste]();",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\":{{CALC_ID}},\n    \"descricao\": \"Aguardando processamento\",\n    \"valor1\": \"{{$randomInt}}\",\n    \"valor2\": \"{{$randomInt}}\",\n    \"sinal\": \"*\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}:{{PORTA}}/{{RECURSO}}/{{API_VERSION}}/atualizar",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORTA}}",
							"path": [
								"{{RECURSO}}",
								"{{API_VERSION}}",
								"atualizar"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Status Atualizar",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let tipoTeste = pm.collectionVariables.get('TIPO_TESTE');",
									"",
									"let fnLocais = {",
									"    principal : function(){",
									"        setTimeout(()=>{}, 2000);",
									"    }",
									"}",
									"",
									"if( Object.keys(fnLocais).includes(tipoTeste) ){",
									"    fnLocais[tipoTeste]();",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let apiVersion = pm.environment.get('API_VERSION');",
									"",
									"let code = pm.response.code;",
									"",
									"let tipoTeste = pm.collectionVariables.get('TIPO_TESTE');",
									"",
									"let fnLocais = {",
									"    principal : function(){",
									"        try{",
									"            ",
									"            let jsonResponse = pm.response.json();",
									"",
									"            if(apiVersion == 'v1'){",
									"                pm.test('Detalhar Calculo não disponível nessa versão da api.');",
									"                return;",
									"            }",
									"",
									"            let contador = pm.collectionVariables.get('CONTADOR');",
									"",
									"            if( contador >= 15 ){      ",
									"                throw new Error('Limite de tentativas atingido');",
									"            }",
									"",
									"            if( !Object.keys(jsonResponse).includes('estado') ){",
									"                throw new Error('Estado não retornado');",
									"            }",
									"",
									"            if( jsonResponse.estado == 'F' ){",
									"                pm.test('Calculo processado com sucesso');",
									"                setTimeout(()=>{},5000);",
									"                return;",
									"            }",
									"",
									"            pm.test('Tentativa de consulta finalizada, Cálculo ainda em processamento');",
									"",
									"            pm.collectionVariables.set('CONTADOR', ++contador);",
									"            postman.setNextRequest('Check Status Atualizar');",
									"        }catch(err){",
									"            pm.test(err.message, ()=>{",
									"                pm.expect().fail();",
									"            });",
									"        }",
									"    }",
									"}",
									"",
									"if(Object.keys(fnLocais).includes(tipoTeste)){",
									"    fnLocais[tipoTeste]();",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}:{{PORTA}}/{{RECURSO}}/{{API_VERSION}}/status/{{CALC_ID}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORTA}}",
							"path": [
								"{{RECURSO}}",
								"{{API_VERSION}}",
								"status",
								"{{CALC_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Detalhar Pos Atualizar",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let tipoTeste = pm.collectionVariables.get('TIPO_TESTE');",
									"",
									"let fnLocais = {}",
									"",
									"if( Object.keys(fnLocais).includes(tipoTeste) ){",
									"    fnLocais[tipoTeste]();",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let apiVersion = pm.environment.get('API_VERSION');",
									"",
									"let code = pm.response.code;",
									"",
									"let tipoTeste = pm.collectionVariables.get('TIPO_TESTE');",
									"",
									"let fnLocais = {",
									"    principal : function(){",
									"        try{",
									"            ",
									"            let jsonResponse = pm.response.json();",
									"",
									"            if(apiVersion == 'v1'){",
									"                pm.test('Detalhar Calculo não disponível nessa versão da api.');",
									"                return;",
									"            }",
									"",
									"            if( !Object.keys(jsonResponse).includes('estado') ){",
									"                throw new Error('Estado não retornado');",
									"            }",
									"",
									"            if( !Object.keys(jsonResponse).includes('descricao')",
									"                && apiVersion == 'v2' ){",
									"                throw new Error('Descrição não retornada');",
									"            }",
									"",
									"            if( jsonResponse.estado == 'F' ){",
									"                pm.test('Calculo ' + jsonResponse.descricao + ' processado com sucesso');",
									"                return;",
									"            }",
									"            ",
									"        }catch(err){",
									"            pm.test(err.message, ()=>{",
									"                pm.expect().fail();",
									"            });",
									"        }",
									"    }",
									"}",
									"",
									"if(Object.keys(fnLocais).includes(tipoTeste)){",
									"    fnLocais[tipoTeste]();",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}:{{PORTA}}/{{RECURSO}}/{{API_VERSION}}/detalhar/{{CALC_ID}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORTA}}",
							"path": [
								"{{RECURSO}}",
								"{{API_VERSION}}",
								"detalhar",
								"{{CALC_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletar Calculo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let code = pm.response.code;",
									"",
									"let tipoTeste = pm.collectionVariables.get('TIPO_TESTE');",
									"",
									"let fnLocais = {",
									"    principal : function(){",
									"        pm.test('Codigo no content retornado', ()=>{",
									"            pm.expect(code).to.be.eq(204);",
									"        });",
									"    }",
									"}",
									"",
									"if(Object.keys(fnLocais).includes(tipoTeste)){",
									"    fnLocais[tipoTeste]();",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let tipoTeste = pm.collectionVariables.get('TIPO_TESTE');",
									"",
									"let fnLocais = {",
									"    principal : function(){",
									"        setTimeout(()=>{},10000);",
									"    }",
									"}",
									"",
									"if( Object.keys(fnLocais).includes(tipoTeste) ){",
									"    fnLocais[tipoTeste]();",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}:{{PORTA}}/{{RECURSO}}/{{API_VERSION}}/deletar/{{CALC_ID}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORTA}}",
							"path": [
								"{{RECURSO}}",
								"{{API_VERSION}}",
								"deletar",
								"{{CALC_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Status Deletar",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let tipoTeste = pm.collectionVariables.get('TIPO_TESTE');",
									"",
									"let fnLocais = {}",
									"",
									"if(Object.keys(fnLocais).includes(tipoTeste)){",
									"    fnLocais[tipoTeste]();",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let code = pm.response.code;",
									"",
									"let tipoTeste = pm.collectionVariables.get('TIPO_TESTE');",
									"",
									"let fnLocais = {",
									"    principal : function(){",
									"        try{",
									"            ",
									"            let calcId = pm.collectionVariables.get('CALC_ID');",
									"            let jsonResponse = pm.response.json();",
									"",
									"            let idNaoRetornado = jsonResponse.id === undefined",
									"                || jsonResponse.id === null;",
									"",
									"            if(!idNaoRetornado){",
									"                throw new Error('Não era esperado encontrar o registro');",
									"            }",
									"",
									"            pm.test('Registro ID ' + calcId + ' não encontrado como esperado');",
									"",
									"        }catch(err){",
									"            pm.test(err.message, ()=>{",
									"                pm.expect().fail();",
									"            });",
									"        }",
									"    }",
									"}",
									"",
									"if( Object.keys(fnLocais).includes(tipoTeste) ){",
									"    fnLocais[tipoTeste]();",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}:{{PORTA}}/{{RECURSO}}/{{API_VERSION}}/status/{{CALC_ID}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORTA}}",
							"path": [
								"{{RECURSO}}",
								"{{API_VERSION}}",
								"status",
								"{{CALC_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Direcionar Proximo Teste",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let tipoTeste = pm.collectionVariables.get('TIPO_TESTE');",
									"",
									"let fnLocais = {",
									"    principal : function(){",
									"        //NA",
									"    },",
									"    crossOrigin : function(){",
									"        //NA",
									"    },",
									"    tokenInvalido : function(){",
									"        let tokenAtual = pm.environment.get('TOKEN');",
									"        pm.environment.set(tokenAtual.replace('@@@',''));",
									"    }",
									"}",
									"",
									"if( Object.keys(fnLocais).includes(tipoTeste) ){",
									"    fnLocais[tipoTeste]();",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let tipoTeste = pm.collectionVariables.get('TIPO_TESTE');",
									"",
									"let fnLocais = {",
									"    principal : function(){",
									"        pm.test('Fluxo de Testes Principal Encerrado');",
									"        pm.collectionVariables.set('TIPO_TESTE', undefined);",
									"        redirecionamento();",
									"    },",
									"    crossOrigin : function(){",
									"        pm.test('Fluxo de Testes ' + tipoTeste + ' Encerrado');",
									"        pm.request.headers.remove('Origin');",
									"        redirecionamento();",
									"    },",
									"    tokenInvalido : function(){",
									"        pm.test('Fluxo de Testes ' + tipoTeste + ' Encerrado');",
									"        redirecionamento();",
									"    }",
									"}",
									"",
									"if( Object.keys(fnLocais).includes(tipoTeste) ){",
									"    fnLocais[tipoTeste]();",
									"}",
									"",
									"function redirecionamento(){",
									" ",
									"    try{",
									"        let nextReqTest = pm.collectionVariables.get('NEXT_REQ_TEST');",
									"",
									"        if( tipoTeste == 'principal' ){",
									"            pm.collectionVariables.set('TIPO_TESTE', undefined);",
									"            return;",
									"        }",
									"",
									"        if( nextReqTest !== undefined && nextReqTest !== null",
									"            && nextReqTest !== '' ){",
									"            pm.collectionVariables.set('TIPO_TESTE', undefined);",
									"            postman.setNextRequest(nextReqTest);",
									"        }else{",
									"            throw new Error('Request do próximo teste não foi definida!');",
									"        }",
									"    }catch(err){",
									"        let msg = err.message !== undefined ? err.message : 'Erro desconhecido...';",
									"        pm.test(msg, ()=>{",
									"            pm.expect().fail();",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "ignore_teste",
								"value": "true",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}:{{PORTA}}/{{HOME}}/{{API_VERSION}}/",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORTA}}",
							"path": [
								"{{HOME}}",
								"{{API_VERSION}}",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Teste CrossOrigin",
			"item": [
				{
					"name": "Teste CrossOrigin",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('PREV_REQ_TEST', 'Teste crossOrigin');",
									"pm.collectionVariables.set('NEXT_REQ_TEST', 'Teste Token Invalido');",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Redirecionando para Cenario de testes de Cross Origin');",
									"postman.setNextRequest('Inicio Fluxo Principal');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}:{{PORTA}}/{{HOME}}/{{API_VERSION}}/",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORTA}}",
							"path": [
								"{{HOME}}",
								"{{API_VERSION}}",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Teste Token Invalido",
			"item": [
				{
					"name": "Teste Token Invalido",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('PREV_REQ_TEST', 'Teste Token Invalido');",
									"pm.collectionVariables.set('NEXT_REQ_TEST', 'Fim');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Redirecionando para Cenario de testes de Token Inválido');",
									"postman.setNextRequest('Inicio Fluxo Principal');",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}:{{PORTA}}/{{HOME}}/{{API_VERSION}}/",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORTA}}",
							"path": [
								"{{HOME}}",
								"{{API_VERSION}}",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Fim",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Fluxo de calculos testado com sucesso');",
							"",
							"pm.environment.set('TOKEN', '');",
							"pm.environment.set('TIME_EXPIRE_TOKEN', 0);",
							"",
							"pm.collectionVariables.clear();",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HOST}}:{{PORTA}}/{{HOME}}/{{API_VERSION}}/",
					"host": [
						"{{HOST}}"
					],
					"port": "{{PORTA}}",
					"path": [
						"{{HOME}}",
						"{{API_VERSION}}",
						""
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"let strUtils = pm.collectionVariables.get('API_UTILS');",
					"        ",
					"if(strUtils !== undefined){",
					"    let apiUtils = eval(pm.collectionVariables.get('API_UTILS'));",
					"    apiUtils.validarToken(pm.environment.get('TOKEN'));",
					"}",
					"",
					"",
					"",
					"",
					"/**",
					" * Rotinas de pré request script genéricas para todas as requests",
					" */",
					"let tipoTeste = pm.collectionVariables.get('TIPO_TESTE');",
					"",
					"let fnLocais = {",
					"    crossOrigin : function(){",
					"        pm.request.headers.add({key:\"Origin\",value:pm.collectionVariables.get('TEST_ORIGIN')});",
					"    },",
					"    tokenInvalido : function(){",
					"        let tokenAtual = pm.environment.get('TOKEN');",
					"        if( tokenAtual.indexOf('@@@') > -1 ){",
					"            return;",
					"        }",
					"        pm.environment.set('TOKEN', tokenAtual.concat('@@@'));",
					"    }",
					"}",
					"",
					"if( Object.keys(fnLocais).includes(tipoTeste) ){",
					"    fnLocais[tipoTeste]();",
					"}",
					"",
					"",
					"",
					"",
					"/**",
					" * objeto contendo as funções criadoras de",
					" * variáveis de acordo com o tipo",
					" */",
					"let fnsCreator = {",
					"    criarString : function criarString(nome, valor){",
					"        pm.collectionVariables.set(nome, valor);",
					"    },",
					"    criarNumber : function criarNumber(nome, valor){",
					"        pm.collectionVariables.set(nome, valor);",
					"    },",
					"    criarArray : function criarArray(nome, valor){",
					"        pm.collectionVariables.set(nome, valor);",
					"    }",
					"}",
					"",
					"//lista de variáveis a serem criadas",
					"let defaultListVars = [",
					"    {nome:'FLUXO_PRINCIPAL_INICIADO', tipo:'Number', valor:2},",
					"    {nome:'PREV', tipo:'String', valor:''},",
					"    {nome:'NEXT', tipo:'String', valor:''},",
					"    {nome:'PREV_REQ_TEST', tipo:'String', valor:''},",
					"    {nome:'NEXT_REQ_TEST', tipo:'String', valor:''},",
					"    {nome:'TIPO_TESTE', tipo:'String', valor:'principal'},",
					"    {nome:'CONTADOR', tipo:'Number', valor:0},",
					"    {nome:'CALC_ID', tipo:'Number', valor:0},",
					"    {nome:'TEST_ORIGIN', tipo:'String', valor:'http://localhost:8091'},",
					"    {nome:'CONTADOR_REQUESTS', tipo:'Number', valor:0},",
					"    {nome:'LIST_REQUESTS', tipo:'Array', valor:[",
					"        'Inicio Fluxo Principal',",
					"        'Criar Calculo','Listar Calculos Json','Listar Calculos Xml',",
					"        'Detalhar Pos Salvar','Atualizar Calculo','Detalhar Pos Atualizar',",
					"        'Deletar Calculo','Detalhar Pos Deletar','Direcionar Proximo Teste'",
					"    ]}",
					"];",
					"",
					"//aplica um callback em cada variavel da lista para criá-las",
					"let callback = (v) => {",
					"    ",
					"    let pmCollVar = pm.collectionVariables.get(v.nome);",
					"    ",
					"    if(pmCollVar !== undefined){",
					"        return;",
					"    }",
					"",
					"    let fn = 'criar'.concat(v.tipo);",
					"    fnsCreator[fn](v.nome, v.valor);",
					"    ",
					"};",
					"",
					"defaultListVars.forEach(callback);",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"let code = pm.response.code;",
					"let ignoreTeste = pm.request.headers.get('ignore_teste');",
					"",
					"let tipoTeste = pm.collectionVariables.get('TIPO_TESTE');",
					"",
					"let fnLocais = {",
					"    principal : function(){",
					"        //Teste pode variar em cada request",
					"    },",
					"    crossOrigin : function(){",
					"        pm.test('Codigo 403 Forbidden retornado.', ()=>{",
					"            pm.expect(code).to.be.eq(403);",
					"        });",
					"    },",
					"    tokenInvalido : function(){",
					"        pm.test('Codigo 401 Unauthorized retornado.', ()=>{",
					"            pm.expect(code).to.be.eq(401);",
					"        });",
					"    },",
					"    noTest(){",
					"        pm.test('Sem testes definidos nessa request.');",
					"    }",
					"}",
					"",
					"if( Object.keys(fnLocais).includes(tipoTeste)",
					"    && ignoreTeste === undefined ){",
					"    fnLocais[tipoTeste]();",
					"}",
					""
				]
			}
		}
	]
}